/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type DeploymentPlan struct {
	// Name of the Deployment to manage
	// +kubebuilder:validation:MinLength=1
	Name string `json:"name"`
	// List of other deployments that must be completed before this one
	DependsOn []string `json:"dependsOn,omitempty"`
}

// UpgradeOrchestratorSpec defines the desired state of UpgradeOrchestrator
type UpgradeOrchestratorSpec struct {
	// List of other deployments that must be completed before this one
	// If empty, this deployment can start immediately
	// +kubebuilder:validation:MinItems=1
	Deployments []DeploymentPlan `json:"deployments"`
}

// UpgradeOrchestratorStatus defines the observed state of UpgradeOrchestrator
type UpgradeOrchestratorStatus struct {
	// Deployment currently being applied
	CurrentDeployment string `json:"currentDeployment,omitempty"`

	// List of completed deployments
	Completed []string `json:"completed,omitempty"`

	// Current phase of the upgrade process
	// E.g., "Pending", "InProgress", "Completed", "Failed"
	Phase string `json:"phase,omitempty"`
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status

// UpgradeOrchestrator is the Schema for the UpgradeOrchestrator API
type UpgradeOrchestrator struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   UpgradeOrchestratorSpec   `json:"spec,omitempty"`
	Status UpgradeOrchestratorStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// UpgradeOrchestratorList contains a list of UpgradeOrchestrator
type UpgradeOrchestratorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UpgradeOrchestrator `json:"items"`
}

func init() {
	SchemeBuilder.Register(&UpgradeOrchestrator{}, &UpgradeOrchestratorList{})
}
